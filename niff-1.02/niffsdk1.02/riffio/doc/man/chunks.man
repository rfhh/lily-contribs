.rn '' }`
''' $RCSfile$$Revision$$Date$
'''
''' $Log$
'''
.de Sh
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp
.if t .sp .5v
.if n .sp
..
.de Ip
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb
.ft CW
.nf
.ne \\$1
..
.de Ve
.ft R

.fi
..
'''
'''
'''     Set up \*(-- to give an unbreakable dash;
'''     string Tr holds user defined translation string.
'''     Bell System Logo is used as a dummy character.
'''
.tr \(*W-|\(bv\*(Tr
.ie n \{\
.ds -- \(*W-
.ds PI pi
.if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\" diablo 12 pitch
.ds L" ""
.ds R" ""
.ds L' '
.ds R' '
'br\}
.el\{\
.ds -- \(em\|
.tr \*(Tr
.ds L" ``
.ds R" ''
.ds L' `
.ds R' '
.ds PI \(*p
'br\}
.\"	If the F register is turned on, we'll generate
.\"	index entries out stderr for the following things:
.\"		TH	Title 
.\"		SH	Header
.\"		Sh	Subsection 
.\"		Ip	Item
.\"		X<>	Xref  (embedded
.\"	Of course, you have to process the output yourself
.\"	in some meaninful fashion.
.if \nF \{
.de IX
.tm Index:\\$1\t\\n%\t"\\$2"
..
.nr % 0
.rr F
.\}
.TH chunks 3 "riffio" "14/Jun/96" "RIFFIO Documentation"
.IX Title "chunks 3"
.UC
.IX Name "chunks - create, navigate, and operate on chunks"
.if n .hy 0
.if n .na
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.de CQ          \" put $1 in typewriter font
.ft CW
'if n "\c
'if t \\&\\$1\c
'if n \\&\\$1\c
'if n \&"
\\&\\$2 \\$3 \\$4 \\$5 \\$6 \\$7
'.ft R
..
.\" @(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2
.	\" AM - accent mark definitions
.bd B 3
.	\" fudge factors for nroff and troff
.if n \{\
.	ds #H 0
.	ds #V .8m
.	ds #F .3m
.	ds #[ \f1
.	ds #] \fP
.\}
.if t \{\
.	ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.	ds #V .6m
.	ds #F 0
.	ds #[ \&
.	ds #] \&
.\}
.	\" simple accents for nroff and troff
.if n \{\
.	ds ' \&
.	ds ` \&
.	ds ^ \&
.	ds , \&
.	ds ~ ~
.	ds ? ?
.	ds ! !
.	ds /
.	ds q
.\}
.if t \{\
.	ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.	ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.	ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.	ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.	ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.	ds ? \s-2c\h'-\w'c'u*7/10'\u\h'\*(#H'\zi\d\s+2\h'\w'c'u*8/10'
.	ds ! \s-2\(or\s+2\h'-\w'\(or'u'\v'-.8m'.\v'.8m'
.	ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.	ds q o\h'-\w'o'u*8/10'\s-4\v'.4m'\z\(*i\v'-.4m'\s+4\h'\w'o'u*8/10'
.\}
.	\" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds v \\k:\h'-(\\n(.wu*9/10-\*(#H)'\v'-\*(#V'\*(#[\s-4v\s0\v'\*(#V'\h'|\\n:u'\*(#]
.ds _ \\k:\h'-(\\n(.wu*9/10-\*(#H+(\*(#F*2/3))'\v'-.4m'\z\(hy\v'.4m'\h'|\\n:u'
.ds . \\k:\h'-(\\n(.wu*8/10)'\v'\*(#V*4/10'\z.\v'-\*(#V*4/10'\h'|\\n:u'
.ds 3 \*(#[\v'.2m'\s-2\&3\s0\v'-.2m'\*(#]
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.ds oe o\h'-(\w'o'u*4/10)'e
.ds Oe O\h'-(\w'O'u*4/10)'E
.	\" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.	\" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.	ds : e
.	ds 8 ss
.	ds v \h'-1'\o'\(aa\(ga'
.	ds _ \h'-1'^
.	ds . \h'-1'.
.	ds 3 3
.	ds o a
.	ds d- d\h'-1'\(ga
.	ds D- D\h'-1'\(hy
.	ds th \o'bp'
.	ds Th \o'LP'
.	ds ae ae
.	ds Ae AE
.	ds oe oe
.	ds Oe OE
.\}
.rm #[ #] #H #V #F C
.SH "NAME"
.IX Header "NAME"
chunks \- create, navigate, and operate on chunks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Sh "Chunk Creation"
.IX Subsection "Chunk Creation"
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkCreate()\fR
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkFinalize()\fR
.Sh "Chunk Navigation"
.IX Subsection "Chunk Navigation"
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkDescend()\fR
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkAscend()\fR
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkDataEnd()\fR
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkEnd()\fR
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkDataOffset()\fR
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkSeekData()\fR
.Sh "Chunk Operations"
.IX Subsection "Chunk Operations"
.Ip "\(bu" 4
.IX Item "\(bu"
\fIRIFFIOChunkIsList()\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.SH "RIFFIOChunkCreate"
.IX Header "RIFFIOChunkCreate"
Start a new chunk in a RIFF file.
.PP
.Vb 2
\&     RIFFIOSuccess
\&     RIFFIOChunkCreate(RIFFIOFile *prf, RIFFIOChunk *pchunk) 
.Ve
.Sh "\s-1ENTRY\s0"
.IX Subsection "\s-1ENTRY\s0"
.Ip "\(bu" 4
.IX Item "\(bu"
pchunk->fccId provides the new chunk id.
.Ip "\(bu" 4
.IX Item "\(bu"
pchunk->fccType must contain a type id for Lists and Forms and
is ignored otherwise.
.Ip "\(bu" 4
.IX Item "\(bu"
pchunk->sizeData does not need to be correct.
.Sh "\s-1EXIT\s0"
.IX Subsection "\s-1EXIT\s0"
.Ip "\(bu" 4
.IX Item "\(bu"
Writes a chunk header to *prf according to *pchunk.
\fIRIFFIOChunkCreate()\fR will write pchunk->sizeData to the file.
.Ip "\(bu" 4
.IX Item "\(bu"
Leaves *prf positioned at the start of the new chunk's data,
.Ip "\(bu" 4
.IX Item "\(bu"
If *pchunk is a form, then *prf is marked with the proper
byte order.
.Sh "\s-1OBLIGATIONS\s0"
.IX Subsection "\s-1OBLIGATIONS\s0"
.Ip "\(bu" 4
.IX Item "\(bu"
After writing the chunk contents, *pchunk
must be finished with \fIRIFFIOChunkFinalize()\fR.
.Ip "\(bu" 4
.IX Item "\(bu"
Don't change the <*pchunk> data members before calling
\fIRIFFIOChunkFinalize()\fR.
.Ip "\(bu" 4
.IX Item "\(bu"
If the pchunk->sizeData is correct when the chunk is finalized,
then \fIRIFFIOChunkFinalize()\fR will not update the chunk's size in
the file.
.Sh "\s-1ERRORS\s0"
.IX Subsection "\s-1ERRORS\s0"
On failure, the file position is undefined.
.SH "RIFFIOChunkFinalize"
.IX Header "RIFFIOChunkFinalize"
Finish writing a new chunk in a RIFF file.
.PP
.Vb 2
\&     RIFFIOSuccess
\&     RIFFIOChunkFinalize(RIFFIOFile *prf, RIFFIOChunk *pchunk)
.Ve
.Sh "\s-1ENTRY\s0"
.IX Subsection "\s-1ENTRY\s0"
<*pchunk> was returned by RIFFIOChunkCreate
.Sh "\s-1EXIT\s0"
.IX Subsection "\s-1EXIT\s0"
.Ip "\(bu" 4
.IX Item "\(bu"
Updates the chunk size in the file and in <*pchunk> (if necessary).
.Ip "\(bu" 4
.IX Item "\(bu"
Writes a \s-1NUL\s0 pad byte (if necessary).
.Ip "\(bu" 4
.IX Item "\(bu"
Leaves the file positioned after the chunk.
.Sh "\s-1ERRORS\s0"
.IX Subsection "\s-1ERRORS\s0"
On failure, the file position is undefined.
.SH "RIFFIOChunkDescend"
.IX Header "RIFFIOChunkDescend"
Read a chunk header from a RIFF file.
.PP
.Vb 2
\&     RIFFIOSuccess
\&     RIFFIOChunkDescend(RIFFIOFile *prf, RIFFIOChunk *pchunk)
.Ve
.Sh "\s-1ENTRY\s0"
.IX Subsection "\s-1ENTRY\s0"
<*prf> must be positioned at the start of a chunk.
.Sh "\s-1EXIT\s0"
.IX Subsection "\s-1EXIT\s0"
.Ip "\(bu" 4
.IX Item "\(bu"
Leaves the file positioned at the start of the chunk's contents
(either the first subchunk of a \s-1LIST\s0 or a normal chunk's data).
.Ip "\(bu" 4
.IX Item "\(bu"
If the chunk is a \s-1RIFF\s0 or \s-1RIFX\s0 form, then
marks the RIFFIOFile byte order accordingly.
.Ip "\(bu" 4
.IX Item "\(bu"
<*pchunk> holds the id, size, and possibly the
list type of the newly read chunk.
.Sh "\s-1ERRORS\s0"
.IX Subsection "\s-1ERRORS\s0"
On failure the file position is undefined.
.SH "RIFFIOChunkAscend"
.IX Header "RIFFIOChunkAscend"
Advance a RIFF file past a chunk.
.PP
.Vb 2
\&     RIFFIOSuccess
\&     RIFFIOChunkAscend(RIFFIOFile *prf, const RIFFIOChunk *pchunk)
.Ve
.Sh "\s-1ENTRY\s0"
.IX Subsection "\s-1ENTRY\s0"
<*pchunk> was returned by either RIFFIOChunkDescend or
RIFFIOChunkFinalize.
.Sh "\s-1EXIT\s0"
.IX Subsection "\s-1EXIT\s0"
<*prf> is positioned at the end of <*pchunk>
.Sh "\s-1ERRORS\s0"
.IX Subsection "\s-1ERRORS\s0"
On failure, the file position is undefined.
.SH "RIFFIOChunkDataOffset"
.IX Header "RIFFIOChunkDataOffset"
Return the file position of a chunk's data (or list's first subchunk)
.PP
.Vb 2
\&     RIFFIOOffset
\&     RIFFIOChunkDataOffset(const RIFFIOChunk *pchunk)
.Ve
.SH "RIFFIOChunkSeekData"
.IX Header "RIFFIOChunkSeekData"
Seek to the start of a chunk's data or a list's contents
.PP
.Vb 2
\&     RIFFIOSuccess
\&     RIFFIOChunkSeekData(RIFFIOFile *prf, const RIFFIOChunk *pchunk)
.Ve
Note that this is different than \fIRIFFIOChunkDescend()\fR because
\fIRIFFIOChunkSeekData()\fR can be called regardless of the current
file postion.
.Sh "\s-1ENTRY\s0"
.IX Subsection "\s-1ENTRY\s0"
<*prf> may be positioned anywhere.
.Sh "\s-1EXIT\s0"
.IX Subsection "\s-1EXIT\s0"
<*prf> is postioned at the start of a chunk's data or the first
subchunk of a list.
.Sh "\s-1ERRORS\s0"
.IX Subsection "\s-1ERRORS\s0"
On error, the file postion is undefined.
.SH "RIFFIOChunkIsList"
.IX Header "RIFFIOChunkIsList"
Return true if a chunk is a form or a list.
.PP
.Vb 2
\&     int
\&     RIFFIOChunkIsList(const RIFFIOChunk *pchunk)
.Ve
.SH "RIFFIOChunkDataEnd"
.IX Header "RIFFIOChunkDataEnd"
Return true if a file is positioned at the end of a chunk's data.
.PP
.Vb 2
\&     int
\&     RIFFIOChunkDataEnd(RIFFIOFile *prf, const RIFFIOChunk *pchunk)
.Ve
The chunk data's end may be before any NUL pad byte.
.Sh "\s-1ENTRY\s0"
.IX Subsection "\s-1ENTRY\s0"
<*pchunk> must be a \*(L"clean\*(R" chunk, returned by either
\fIRIFFIOChunkDescend()\fR or \fIRIFFIOChunkFinalize()\fR.
.SH "RIFFIOChunkEnd"
.IX Header "RIFFIOChunkEnd"
Return true if a RIFF file is positioned at the end of a chunk.
.PP
.Vb 2
\&     int
\&     RIFFIOChunkEnd(RIFFIOFile *prf, const RIFFIOChunk *pchunk)
.Ve
The chunk end is after any NUL pad byte.
.Sh "\s-1ENTRY\s0"
.IX Subsection "\s-1ENTRY\s0"
<*pchunk> must be a \*(L"clean\*(R" chunk, returned by either
\fIRIFFIOChunkDescend()\fR or \fIRIFFIOChunkFinalize()\fR.

.rn }` ''


 NAME
 ====
 NIFFIO chunk length table routines.

 - NIFFIOCLTNew()
 - NIFFIOCLTDelete()

 - NIFFIOCLTMakeEntry()
 - NIFFIOCLTMakeDefaultEntries()
 - NIFFIOCLTLookup()

 - NIFFIOCLTCount()
 - NIFFIOCompareFOURCC()
 


 NIFFIOCLTNew
 ============
 Return a new, empty NIFFIOChunkLengthTable, or null on failure.

| NIFFIOChunkLengthTable *
| NIFFIOCLTNew()

 NIFFIOCLTDelete
 ===============
 Free the memory allocated to a chunk length table.

| void
| NIFFIOCLTDelete(NIFFIOChunkLengthTable *pclt)

 NIFFIOCLTMakeEntry
 ==================
 Make an entry into a chunk length table.

| RIFFIOSuccess
| NIFFIOCLTMakeEntry(NIFFIOChunkLengthTable *pclt, 
|                    niffChklentabEntry cltEntry)

 ENTRY
 -----
 T <cltEntry> is filled with the values for the new entry
 
 EXIT
 ----
  - T <cltEntry> is added to <*pclt>
  - If an existing entry in <*pclt> matches <cltEntry> then
    the entry's value is replaced.


 NIFFIOCLTMakeDefaultEntries
 ===========================
 Fill a chunk length table with "canned" entries.

| RIFFIOSuccess
| NIFFIOCLTMakeDefaultEntries(NIFFIOChunkLengthTable *pclt)

 This routine is useful if you don't need a custom chunk length
 table.  It fills an existing chunk length table with a complete set
 of chunk length entries for each chunk in the NIFF specification.

 TWB - Should this include INFO chunks? probably.


 NIFFIOCLTLookup
 ===============
 Lookup a chunk length given an FOURCC.

| RIFFIOSuccess
| NIFFIOCLTLookup(NIFFIOChunkLengthTable *pclt, niffChklentabEntry *cltEntryp)

 ENTRY
 -----
 T <cltEntryp->chunkName> contains the FOURCC to look up in <*pclt>.

 EXIT
 ----
 Fills in <cltEntryp->offsetOfFirstTag> according to <*pclt>.

 RETURN
 ------
  RIFFIO_OK :
     if <cltEntryp->chunkName> was found.

  RIFFIO_FAIL : 
     otherwise 


 NIFFIOCLTCount
 ==============
 Return the number of entries in a chunk length table

| unsigned
| NIFFIOCLTCount(NIFFIOChunkLengthTable *pclt)
 
 NIFFIOCompareFOURCC
 ===================
 Compare FOURCCs alphabetically.

| int
| NIFFIOCompareFOURCC(FOURCC fccA, FOURCC fccB)

 RETURN
 ------
       * <0 if a comes before b
       *  0 if a is the same as b
       * >0 if a comes after b

 The return results are compatible with bsearch()  
 and strcmp() in the Standard C library.


